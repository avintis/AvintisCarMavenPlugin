package com.avintis.car.plugin;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;

import com.avintis.car.plugin.CARBuilder;

@Mojo(name = "car")
public class CARCreator extends AbstractMojo
{
	// project specific attributes are needed, e.g. version
	@Parameter(readonly = true, defaultValue = "${project}")
	private MavenProject project;

	@Parameter(property = "car.includeMediators")
	private boolean includeMediators;

	@Parameter(property = "replace")
	private String replace;

	public void execute() throws MojoExecutionException
	{
		// car folder is in parent folder from the build folder
		File carFolder = new File(project.getBuild().getDirectory(), "car");

		// using ALL files copied by the maven source plugin
		ArrayList<File> files = new ArrayList<File>();
		
		//carfolder only exists if the project contains at least one config file
		if(carFolder.exists())
		{
			for (File file : carFolder.listFiles())
			{
				files.add(file);
			}
		}

		// includeMediators is a config property from the AvintisCarMavenPlugin
		if (files.size() == 0 && !includeMediators)
		{
			getLog().info("Nothing to do: No files or Mediators selected to create CAR file!");
			return; // nothing to do
		}

		// replace variables in the config files. Do only if explicitly called by maven
		// parameter
		// Maven parameter: -Dreplace=/path/to/file.properties or
		// -Dreplace=filename.properties
		if (!(replace == null || replace.equals("")))
		{
			File propertyFile;
			if (replace.contains("/") || replace.contains("\\")) // assume absolute path
			{
				propertyFile = new File(replace);
				if (!propertyFile.exists())
				{
					throw new MojoExecutionException(
							"Property-File for replacement not found. Please verify that the resplace parameter is either a file in the resource folder or a abolute path to a properties-file!");
				}
			} else
			{
				propertyFile = new File(project.getBasedir(), "/resources/" + replace);
			}
			
			//read properties map
			Properties props = new Properties();
			try
			{
				FileInputStream fis = new FileInputStream(propertyFile);
				InputStreamReader isr = new InputStreamReader(fis, "UTF-8");
				props.load(isr);
				isr.close();
				getLog().info("Replacing content using: " + propertyFile.getName());
			}
			catch(Exception e)
			{
				throw new MojoExecutionException("Property-File could not be read!", e);
			}

			for(File file : files)
			{
				//files are copied using maven source plugin. There is no need to write to another file at this point
				try
				{
					if(ConfigReplacer.checkKeyNested(props))
					{
						getLog().warn("Some keys in the Property-File are nested. Please Verify. Execution will continue...");
					}
					ConfigReplacer.replace(file, props, file);
				}
				catch(IOException e)
				{
					throw new MojoExecutionException("IOExecption during replace", e);
				}
			}
		}

		if (includeMediators)
		{
			// jar is generated by the maven compiler plugin. Event there are no source
			// files, the plugin always creates an archive file
			File jarFile = null;
			// name by default
			jarFile = new File(project.getBuild().getDirectory(), project.getBuild().getFinalName() + ".jar");
			if (!jarFile.exists())
			{
				getLog().error("No mediators found!");
			} else
			{
				files.add(jarFile);
			}
		}

		List<Artifact> artifacts = parseArtifacts(files);

		// instantiate a CARBuilder with all the informations
		CARBuilder builder = new CARBuilder(project, artifacts);// option to import config
		try
		{
			builder.build();
		} catch (Exception e)
		{
			getLog().error(e);
		}
	}

	/**
	 * 
	 * @param files
	 *            list containint File-Objects (artifacts as file)
	 * @return list containing Artifact-Objects
	 */
	private List<Artifact> parseArtifacts(List<File> files)
	{
		XMLArtifactParser parser = new XMLArtifactParser();
		List<Artifact> artifacts = new ArrayList<Artifact>();
		for (File f : files)
		{
			try
			{
				artifacts.add(parser.parse(f, project.getVersion()));
			} 
			catch (Exception e)
			{
				getLog().error(("Error parsing file: " + f.getPath()), e);
			}
		}
		return artifacts;
	}
}
